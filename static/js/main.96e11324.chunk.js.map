{"version":3,"sources":["constants.ts","reducer.ts","epics.ts","configureStore.ts","serviceWorker.ts","components/NumberInput.tsx","components/CurrencySelect.tsx","components/locale.tsx","components/styled/index.ts","components/BaseCurrency.tsx","containers/BaseCurrencyContainer.tsx","components/TargetCurrency.tsx","containers/TargetCurrencyContainer.tsx","components/Converter.tsx","containers/ExchangeAppContainer.tsx","index.tsx","i18n/en-us.ts"],"names":["currency","GBP","EUR","USD","FETCH_RATES_REQUEST","FETCH_RATES_SUCCESS","FETCH_RATES_FAILURE","FETCH_RATES_CANCEL","fetchRates","base","type","payload","fetchRatesCancel","exchangeInitialState","date","rates","_rates","Object","defineProperty","getRandomNumber","max","Math","random","accountInitialState","rootReducer","combineReducers","account","state","arguments","length","undefined","exchange","action","keys","reduce","acc","objectSpread","_payload","rawRates","combineEpics","action$","pipe","ofType","switchMap","symbols","filter","symbol","join","interval","startWith","ajax","getJSON","concat","map","res","catchError","err","of","error","fetchRatesFailed","takeUntil","epicMiddleware","createEpicMiddleware","configureStore","initialState","store","createStore","composeWithDevTools","applyMiddleware","reduxThunk","run","rootEpic","Boolean","window","location","hostname","match","StyledInput","styled","input","attrs","size","_templateObject","NumberInput","inputRef","createRef","focus","_this","current","handleChange","e","_this$props","props","sign","onChange","value","target","unsignedValue","slice","formatIsCorrect","test","empty","preventDefault","readOnly","this","react_default","a","createElement","ref","aria-label","renderValue","_this$props2","Component","defaultProps","Wrapper","div","CurrencySelect_templateObject","CurrencySelect","handleCurrencyChange","newCurrency","_this2","selectedCurrency","key","checked","Money","_ref","index_es","style","maximumFractionDigits","Total","_ref2","id","values","locale_Money","Rate","_ref3","baseCurrency","targetCurrency","CurrencyWrapper","styled_templateObject","FieldWrapper","_templateObject2","InfoWrapper","_templateObject3","TextSM","_templateObject4","TextXL","_templateObject5","BaseCurrency","className","total","onValueChange","onCurrencyChange","components_NumberInput","locale_Total","components_CurrencySelect","BaseCurrencyContainer","components_BaseCurrency","connect","TargetCurrency","_ref$className","rate","baseCurrencyAmount","toFixed","locale_Rate","TargetCurrencyContainer","components_TargetCurrency","Converter_templateObject","BaseCurrencyWrapper","Converter_templateObject2","TargetCurrencyWrapper","Converter_templateObject3","Converter","baseCurrencyInputValue","handleTargetChange","setState","handleBaseCurrencyAmountChange","onBaseChange","_this$state","Converter_Wrapper","parseFloat","ExchangeApp","components_Converter","dispatch","bindActionCreators","GlobalStyle","createGlobalStyle","src_templateObject","addLocaleData","toConsumableArray","en","ReactDOM","render","Fragment","locale","messages","exchangeRate","es","ExchangeAppContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96e11324.chunk.js","sourcesContent":["export interface ICurrency {\n  GBP: \"GBP\";\n  EUR: \"EUR\";\n  USD: \"USD\";\n}\n\nexport type Currency = keyof ICurrency;\n\nexport const currency: ICurrency = {\n  GBP: \"GBP\",\n  EUR: \"EUR\",\n  USD: \"USD\",\n};\n","import { combineReducers } from \"redux\";\n\nimport { currency, Currency } from \"./constants\";\n\nexport const FETCH_RATES_REQUEST = \"@exchange-app/FETCH_RATES_REQUEST\";\nexport const FETCH_RATES_SUCCESS = \"@exchange-app/FETCH_RATES_SUCCESS\";\nexport const FETCH_RATES_FAILURE = \"@exchange-app/FETCH_RATES_FAILURE\";\nexport const FETCH_RATES_CANCEL = \"@exchange-app/FETCH_RATES_CANCEL\";\n\nexport type Rates = { [K in Currency]: number };\nexport type FetchRatesAction = {\n  type: string;\n  payload: {\n    base: Currency;\n    date: string;\n    rates: { [K in Currency]?: number };\n  };\n};\nexport type FetchRatesFulfilledAction = ReturnType<typeof fetchRatesFulfilled>;\nexport type FetchRatesFailedAction = ReturnType<typeof fetchRatesFailed>;\nexport type FetchRatesCancelAction = ReturnType<typeof fetchRatesCancel>;\nexport type Action =\n  | FetchRatesAction\n  | FetchRatesFulfilledAction\n  | FetchRatesFailedAction\n  | FetchRatesCancelAction;\n\nexport function fetchRates(base: Currency) {\n  return {\n    type: FETCH_RATES_REQUEST,\n    payload: { base },\n  };\n}\n\nexport function fetchRatesFulfilled(payload: any): FetchRatesAction {\n  return {\n    type: FETCH_RATES_SUCCESS,\n    payload,\n  };\n}\n\nexport function fetchRatesFailed(base: Currency, err: Error) {\n  return {\n    type: FETCH_RATES_FAILURE,\n    error: true,\n    payload: err,\n  };\n}\n\nexport function fetchRatesCancel() {\n  return {\n    type: FETCH_RATES_CANCEL,\n  };\n}\n\nexport type ExchangeState = {\n  readonly base: Currency;\n  readonly date: string;\n  readonly rates: Rates;\n};\n\nconst exchangeInitialState: ExchangeState = {\n  base: currency.GBP,\n  date: \"\",\n  rates: {\n    [currency.GBP]: 1.0,\n    [currency.EUR]: 1.0,\n    [currency.USD]: 1.0,\n  },\n};\n\nfunction exchange(state = exchangeInitialState, action: Action) {\n  switch (action.type) {\n    case FETCH_RATES_REQUEST: {\n      const { base } = (action as FetchRatesAction).payload;\n      const rates = Object.keys(currency).reduce(\n        (acc, currency) => ({ ...acc, [<Currency>currency]: 1.0 }),\n        {}\n      ) as Rates;\n\n      return {\n        ...state,\n        base,\n        rates,\n      };\n    }\n\n    case FETCH_RATES_SUCCESS: {\n      const {\n        base,\n        date,\n        rates: rawRates,\n      } = (action as FetchRatesFulfilledAction).payload;\n      const rates = Object.keys(currency).reduce(\n        (acc, currency) => ({\n          ...acc,\n          [currency]: (rawRates[<Currency>currency] as number) || 1.0,\n        }),\n        {}\n      ) as Rates;\n\n      return {\n        base,\n        date,\n        rates,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport type AccountState = { readonly [C in Currency]: number };\n\nfunction getRandomNumber(max: number) {\n  return Math.random() * max;\n}\n\nconst accountInitialState: AccountState = {\n  GBP: getRandomNumber(100),\n  EUR: getRandomNumber(200),\n  USD: getRandomNumber(500),\n};\n\nfunction account(state = accountInitialState, action?: Action) {\n  return state;\n}\n\nconst rootReducer = combineReducers({ account, exchange });\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import { interval, of } from \"rxjs\";\nimport { ajax } from \"rxjs/ajax\";\nimport {\n  map,\n  switchMap,\n  startWith,\n  takeUntil,\n  catchError,\n} from \"rxjs/operators\";\nimport { Epic, combineEpics, ofType } from \"redux-observable\";\n\nimport { currency } from \"./constants\";\nimport {\n  FETCH_RATES_REQUEST,\n  FETCH_RATES_CANCEL,\n  FetchRatesAction,\n  fetchRatesFulfilled,\n  fetchRatesFailed,\n} from \"./reducer\";\n\nconst fetchRatesEpic: Epic = action$ =>\n  action$.pipe(\n    ofType(FETCH_RATES_REQUEST),\n    switchMap((action: FetchRatesAction) => {\n      const { base } = action.payload;\n      const symbols = Object.keys(currency)\n        .filter(symbol => symbol !== base)\n        .join(\",\");\n\n      return interval(10000).pipe(\n        startWith(0),\n        switchMap(() =>\n          ajax\n            .getJSON(\n              `https://api.exchangeratesapi.io/latest?base=${base}&symbols=${symbols}`\n            )\n            .pipe(\n              map(res => fetchRatesFulfilled(res)),\n              catchError(err => of(fetchRatesFailed(action.payload.base, err)))\n            )\n        ),\n        takeUntil(action$.pipe(ofType(FETCH_RATES_CANCEL)))\n      );\n    })\n  );\n\nexport default combineEpics(fetchRatesEpic);\n","import { createStore, applyMiddleware } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducer from \"./reducer\";\nimport rootEpic from \"./epics\";\n\nconst epicMiddleware = createEpicMiddleware();\n\nfunction configureStore(initialState?: object) {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(reduxThunk, epicMiddleware))\n  );\n\n  epicMiddleware.run(rootEpic);\n\n  return store;\n}\n\nexport default configureStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { ChangeEvent, Component, createRef } from \"react\";\nimport styled from \"styled-components\";\n\ninterface Props {\n  readOnly: boolean;\n  value: string;\n  sign: string;\n  onChange: (value: string) => void;\n}\n\nconst StyledInput = styled.input.attrs({ type: \"text\", size: 10 })`\n  font-size: 2rem;\n  text-align: right;\n  outline: none;\n`;\n\nclass NumberInput extends Component<Props> {\n  static defaultProps = {\n    readOnly: false,\n    onChange: () => {},\n  };\n\n  inputRef = createRef<HTMLInputElement>();\n\n  get renderValue() {\n    const { value, sign } = this.props;\n\n    if (value === \"0\" || value === \"\") {\n      return value;\n    }\n\n    return `${sign}${value}`;\n  }\n\n  focus = () => {\n    if (this.inputRef.current) {\n      this.inputRef.current.focus();\n    }\n  };\n\n  handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { sign, onChange } = this.props;\n    const { value } = e.target;\n    const unsignedValue = value[0] === sign ? value.slice(1) : value;\n    const formatIsCorrect = /^([1-9]\\d*|0)(\\.\\d*)?$/.test(unsignedValue);\n    const empty = value === \"\" || value === sign;\n\n    e.preventDefault();\n\n    if (formatIsCorrect || empty) {\n      onChange(unsignedValue);\n    }\n  };\n\n  render() {\n    const { readOnly } = this.props;\n\n    return (\n      <StyledInput\n        ref={this.inputRef}\n        readOnly={readOnly}\n        aria-label=\"number-input\"\n        value={this.renderValue}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default NumberInput;\n","import React, { ChangeEvent, Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { currency, Currency } from \"../constants\";\n\ninterface Props {\n  selectedCurrency: Currency;\n  onChange: (newCurrency: Currency) => void;\n}\n\nconst Wrapper = styled.div`\n  margin-top: 1rem;\n  text-align: center;\n`;\n\nclass CurrencySelect extends Component<Props> {\n  handleCurrencyChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newCurrency = e.target.value as Currency;\n\n    this.props.onChange(newCurrency);\n  };\n\n  render() {\n    const { selectedCurrency } = this.props;\n\n    return (\n      <Wrapper>\n        {Object.keys(currency).map(symbol => (\n          <label key={symbol}>\n            <input\n              type=\"radio\"\n              value={symbol}\n              checked={symbol === selectedCurrency}\n              onChange={this.handleCurrencyChange}\n            />\n            {symbol}\n          </label>\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default CurrencySelect;\n","import React from \"react\";\nimport { FormattedMessage, FormattedNumber } from \"react-intl\";\nimport { Currency } from \"../constants\";\n\ninterface MoneyProps {\n  currency: Currency;\n  value: number;\n}\n\nexport const Money = ({ currency, value }: MoneyProps) => (\n  <FormattedNumber\n    style=\"currency\"\n    currency={currency}\n    maximumFractionDigits={2}\n    value={value}\n  />\n);\n\ninterface TotalProps {\n  currency: Currency;\n  value: number;\n}\n\nexport const Total = ({ currency, value }: TotalProps) => (\n  <FormattedMessage\n    id=\"total\"\n    values={{ value: <Money currency={currency} value={value} /> }}\n  />\n);\n\ninterface RateProps {\n  baseCurrency: Currency;\n  targetCurrency: Currency;\n  value: number;\n}\n\nexport const Rate = ({ baseCurrency, targetCurrency, value }: RateProps) => (\n  <FormattedMessage\n    id=\"exchangeRate\"\n    values={{\n      target: <Money currency={targetCurrency} value={1} />,\n      base: <Money currency={baseCurrency} value={value} />,\n    }}\n  />\n);\n","import styled from \"styled-components\";\n\nexport const CurrencyWrapper = styled.div`\n  padding: 20px;\n`;\n\nexport const FieldWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const TextSM = styled.div`\n  font-size: 1rem;\n`;\n\nexport const TextXL = styled.div`\n  font-size: 2rem;\n`;\n","import React, { Component, createRef } from \"react\";\n\nimport { Currency } from \"../constants\";\nimport NumberInput from \"./NumberInput\";\nimport CurrencySelect from \"./CurrencySelect\";\nimport { Total } from \"./locale\";\nimport { CurrencyWrapper, FieldWrapper, InfoWrapper, TextXL } from \"./styled\";\n\ninterface Props {\n  className?: string;\n  total: number;\n  value: string;\n  selectedCurrency: Currency;\n  onCurrencyChange: (currency: Currency) => void;\n  onValueChange: (value: string) => void;\n}\n\nclass BaseCurrency extends Component<Props> {\n  static defaultProps = {\n    className: \"\",\n  };\n\n  private inputRef = createRef<NumberInput>();\n\n  componentDidMount() {\n    if (this.inputRef.current) {\n      this.inputRef.current.focus();\n    }\n  }\n\n  render() {\n    const {\n      className,\n      selectedCurrency,\n      total,\n      value,\n      onValueChange,\n      onCurrencyChange,\n    } = this.props;\n\n    return (\n      <CurrencyWrapper className={className}>\n        <FieldWrapper>\n          <TextXL>{selectedCurrency}</TextXL>\n          <NumberInput\n            ref={this.inputRef}\n            value={value}\n            sign=\"-\"\n            onChange={onValueChange}\n          />\n        </FieldWrapper>\n        <InfoWrapper>\n          <Total currency={selectedCurrency} value={total} />\n        </InfoWrapper>\n        <CurrencySelect\n          selectedCurrency={selectedCurrency}\n          onChange={onCurrencyChange}\n        />\n      </CurrencyWrapper>\n    );\n  }\n}\n\nexport default BaseCurrency;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Currency } from \"../constants\";\nimport { RootState } from \"../reducer\";\nimport BaseCurrency from \"../components/BaseCurrency\";\n\ninterface OwnProps {\n  className?: string;\n  value: string;\n  selectedCurrency: Currency;\n  onCurrencyChange: (currency: Currency) => void;\n  onValueChange: (value: string) => void;\n}\n\ninterface StateProps {\n  total: number;\n}\n\nclass BaseCurrencyContainer extends Component<OwnProps & StateProps> {\n  render() {\n    return <BaseCurrency {...this.props} />;\n  }\n}\n\nconst mapStateToProps = (state: RootState, props: OwnProps): StateProps => ({\n  total: state.account[props.selectedCurrency],\n});\n\nexport default connect(mapStateToProps)(BaseCurrencyContainer);\n","import React, { FunctionComponent } from \"react\";\n\nimport { Currency } from \"../constants\";\nimport NumberInput from \"./NumberInput\";\nimport CurrencySelect from \"./CurrencySelect\";\nimport { Total, Rate } from \"./locale\";\nimport {\n  CurrencyWrapper,\n  FieldWrapper,\n  InfoWrapper,\n  TextXL,\n  TextSM,\n} from \"./styled\";\n\ninterface Props {\n  className?: string;\n  rate: number;\n  total: number;\n  baseCurrency: Currency;\n  baseCurrencyAmount: number;\n  selectedCurrency: Currency;\n  onCurrencyChange: (currency: Currency) => void;\n}\n\nconst TargetCurrency: FunctionComponent<Props> = ({\n  className = \"\",\n  rate,\n  total,\n  baseCurrency,\n  baseCurrencyAmount,\n  selectedCurrency,\n  onCurrencyChange,\n}) => {\n  const renderValue = baseCurrencyAmount\n    ? (rate * baseCurrencyAmount).toFixed(2)\n    : \"\";\n\n  return (\n    <CurrencyWrapper className={className}>\n      <FieldWrapper>\n        <TextXL>{selectedCurrency}</TextXL>\n        <NumberInput readOnly value={renderValue} sign=\"+\" />\n      </FieldWrapper>\n      <InfoWrapper>\n        <TextSM>\n          <Total currency={selectedCurrency} value={total} />\n        </TextSM>\n        <TextSM>\n          <Rate\n            baseCurrency={baseCurrency}\n            targetCurrency={selectedCurrency}\n            value={1 / rate}\n          />\n        </TextSM>\n      </InfoWrapper>\n      <CurrencySelect\n        selectedCurrency={selectedCurrency}\n        onChange={onCurrencyChange}\n      />\n    </CurrencyWrapper>\n  );\n};\n\nexport default TargetCurrency;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Currency } from \"../constants\";\nimport { RootState } from \"../reducer\";\nimport TargetCurrency from \"../components/TargetCurrency\";\n\ninterface OwnProps {\n  className?: string;\n  baseCurrency: Currency;\n  baseCurrencyAmount: number;\n  selectedCurrency: Currency;\n  onCurrencyChange: (currency: Currency) => void;\n}\n\ninterface StateProps {\n  rate: number;\n  total: number;\n}\n\nclass TargetCurrencyContainer extends Component<OwnProps & StateProps> {\n  render() {\n    return <TargetCurrency {...this.props} />;\n  }\n}\n\nconst mapStateToProps = (state: RootState, props: OwnProps): StateProps => ({\n  rate: state.exchange.rates[props.selectedCurrency],\n  total: state.account[props.selectedCurrency],\n});\n\nexport default connect(mapStateToProps)(TargetCurrencyContainer);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Currency, currency } from \"../constants\";\nimport BaseCurrency from \"../containers/BaseCurrencyContainer\";\nimport TargetCurrency from \"../containers/TargetCurrencyContainer\";\n\ninterface Props {\n  className?: string;\n  base: Currency;\n  onBaseChange: (newBase: Currency) => any;\n}\n\ninterface State {\n  targetCurrency: Currency;\n  baseCurrencyInputValue: string;\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n`;\n\nconst BaseCurrencyWrapper = styled(BaseCurrency)`\n  flex: 1 0 50%;\n`;\n\nconst TargetCurrencyWrapper = styled(TargetCurrency)`\n  flex: 1 0 50%;\n`;\n\nclass Converter extends Component<Props, State> {\n  readonly state: State = {\n    targetCurrency: currency.EUR,\n    baseCurrencyInputValue: \"\",\n  };\n\n  get baseCurrencyAmount() {\n    const { baseCurrencyInputValue } = this.state;\n\n    return parseFloat(baseCurrencyInputValue);\n  }\n\n  handleTargetChange = (targetCurrency: Currency) => {\n    this.setState({ targetCurrency });\n  };\n\n  handleBaseCurrencyAmountChange = (value: string) => {\n    this.setState({ baseCurrencyInputValue: value });\n  };\n\n  render() {\n    const { className, base, onBaseChange } = this.props;\n    const { targetCurrency, baseCurrencyInputValue } = this.state;\n\n    return (\n      <Wrapper className={className}>\n        <BaseCurrencyWrapper\n          selectedCurrency={base}\n          value={baseCurrencyInputValue}\n          onCurrencyChange={onBaseChange}\n          onValueChange={this.handleBaseCurrencyAmountChange}\n        />\n        <TargetCurrencyWrapper\n          selectedCurrency={targetCurrency}\n          baseCurrency={base}\n          baseCurrencyAmount={this.baseCurrencyAmount}\n          onCurrencyChange={this.handleTargetChange}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default Converter;\n","import React, { Component } from \"react\";\nimport { Dispatch, bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { Currency } from \"../constants\";\nimport { RootState, fetchRates, fetchRatesCancel } from \"../reducer\";\nimport Converter from \"../components/Converter\";\n\ntype OwnProps = {\n  className?: string;\n};\n\ntype StateProps = {\n  base: Currency;\n};\n\ntype DispatchProps = {\n  fetchRates: typeof fetchRates;\n  fetchRatesCancel: typeof fetchRatesCancel;\n};\n\nclass ExchangeApp extends Component<OwnProps & StateProps & DispatchProps> {\n  static defaultProps = {\n    className: \"\",\n  };\n\n  componentDidMount() {\n    this.props.fetchRates(this.props.base);\n  }\n\n  componentWillUnmount() {\n    this.props.fetchRatesCancel();\n  }\n\n  render() {\n    const { base, fetchRates } = this.props;\n\n    return (\n      <Converter\n        className={this.props.className}\n        base={base}\n        onBaseChange={fetchRates}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  base: state.exchange.base,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps =>\n  bindActionCreators({ fetchRates, fetchRatesCancel }, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ExchangeApp);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { IntlProvider, addLocaleData } from \"react-intl\";\nimport en from \"react-intl/locale-data/en\";\n\nimport configureStore from \"./configureStore\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ExchangeAppContainer from \"./containers/ExchangeAppContainer\";\nimport enMessages from \"./i18n/en-us\";\n\nconst store = configureStore();\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    margin: 0;\n    padding: 0;\n  }\n  \n  body {\n    font: normal 16px/1.5 \"Helvetica Neue\", Arial, sans-serif;\n  }\n`;\n\naddLocaleData([...en]);\n\nReactDOM.render(\n  <React.Fragment>\n    <GlobalStyle />\n    <IntlProvider locale=\"en\" messages={enMessages}>\n      <Provider store={store}>\n        <ExchangeAppContainer />\n      </Provider>\n    </IntlProvider>\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\n  total: \"You have {value}\",\n  exchangeRate: \"{target} = {base}\",\n};\n"],"sourceRoot":""}